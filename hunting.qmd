---
title: "Hunting"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Hunting Assignment

```{r}
library(sensitivity)
library(here)
library(tidyverse)
library(deSolve)
```

## Part 1

Include hunting in function:

```{r odesen}
source("R/hunting.R")
```

Try different hunting values: which ones give stable prey population?

```{r}
# note the use of with
# initial conditions
currpop <- c(prey = 1000, pred = 10)

# time points to see results
days <- seq(from = 1, to = 100, by = 1)

# 2 years
years <- seq(from = 1, to = 2*365, by = 1)

# set parameters
pars <- c(rprey = 0.95, alpha = 0.01, eff = 0.6, pmort = 0.4, K = 2000, min_prey_hunt = 500, hunt_rate = 125)

# run the model
res <- ode(func = hunting, y = currpop, times = years, parms = pars)

# graph the results
head(res)

# rearrange for easy plotting
resl <- as.data.frame(res) %>% pivot_longer(-time, names_to = "animal", values_to = "pop")
p1 <- ggplot(resl, aes(time, pop, col = animal)) +
  geom_line()

p1


p2 <- ggplot(as.data.frame(res), aes(pred, prey)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
#p2

# To make this easier to understand - maybe
p2b <- ggplot(as.data.frame(res), aes(pred, prey, col = time)) +
  geom_point() +
  labs(y = "Prey", x = "Predators")
#p2b

#ggarrange(p1, p2b)
```

Prey population stabilizes after about a year with our chosen parameters. We chose min_prey_hunt (the minimum population to allow hunting) to be 25% of the carrying capacity (500) and hunt_rate to be another 25% of the minimum population (125). We found that the prey population stabilized after about a year, even after changing the min_prey_hunt and hunt_rate to 10% and 50% of the respective values. 

From Ojas:

prey is above .... 

in our model, this hunting rate works BUT... doesnt make sense because...


another function to say at a certain time we want to be above a certain value

quantify stability:


## Part 2

# Sobol Analysis (?)

```{r}
# want to learn about sensitivity to growth rate (r) and carrying capacity
# set the number of parameters
np <- 200
K <- 2000
rprey <- 0.95
alpha <- 0.01
eff <- 0.6
pmort <- 0.4
min_prey_hunt <- rnorm(mean = 1000, sd = 0.1, n = np)
hunt_rate <- rnorm(mean = 500, sd = 0.1, n = np)

X1 <- cbind.data.frame(rprey = rprey, K = K, alpha = alpha, eff = eff, pmort = pmort, min_prey_hunt = min_prey_hunt, hunt_rate = hunt_rate)

# repeat to get our second set of samples
np <- 200
K <- 2000
rprey <- 0.95
alpha <- 0.01
eff <- 0.6
pmort <- 0.4
min_prey_hunt <- rnorm(mean = 1000, sd = 0.1, n = np)
hunt_rate <- rnorm(mean = 500, sd = 0.1, n = np)

X2 <- cbind.data.frame(rprey = rprey, K = K, alpha = alpha, eff = eff, pmort = pmort, min_prey_hunt = min_prey_hunt, hunt_rate = hunt_rate)

# create our sobel object and get sets ofparameters for running the model
sens_PP <- sobolSalt(model = NULL, X1, X2, nboot = 300)

# name parameter sets...
colnames(sens_PP$X) <- c("rprey", "K", "alpha", "eff", "pmort", "min_prey_hunt", "hunt_rate")

compute_metrics <- function(result) {
  maxprey <- max(result$prey)
  maxpred <- max(result$pred)
  minprey <- min(result$prey)
  minpred <- min(result$pred)
  return(list(maxprey = maxprey, minprey = minprey, maxpred = maxpred, minpred = minpred))
}

p_wrapper <- function(rprey, alpha, eff, pmort, K, currpop, min_prey_hunt, hunt_rate, days, func) {
  parms <- list(rprey = rprey, alpha = alpha, eff = eff, pmort = pmort, K = K, min_prey_hunt = min_prey_hunt, hunt_rate = hunt_rate)
  result <- ode(y = currpop, times = days, func = func, parms = parms)
  colnames(result) <- c("time", "prey", "pred")
  # get metrics
  metrics <- compute_metrics(as.data.frame(result))
  return(metrics)
}

currpop <- c(prey = 1000, pred = 10)
days <- seq(from = 1, to = 500)
allresults <- as.data.frame(sens_PP$X) %>% pmap(p_wrapper, currpop = currpop, days = days, func = hunting)

# take results back to unlisted form
allres <- allresults %>% map_dfr(`[`, c("maxprey", "minprey", "maxpred", "minpred"))

# range of response across parameter uncertainty
allresl <- allres %>% gather(key = "metric", value = "pop")
ggplot(allresl, aes(metric, pop)) +
  geom_boxplot()

# dealing with different scales
ggplot(allresl, aes(metric, pop, col = metric)) +
  geom_boxplot() +
  facet_wrap(~metric, scales = "free")
# plot cummulative densities

ggplot(allresl, aes(pop, col = metric)) +
  stat_ecdf(geom = "line") +
  facet_wrap(~metric, scales = "free")

# create sobol indices for Max Prey
sens_PP_maxprey <- sens_PP %>% sensitivity::tell(y = allres$maxprey)
rownames(sens_PP_maxprey$S) <- c("rprey", "K", "alpha", "eff", "pmort", "min_prey_hunt", "hunt_rate")
sens_PP_maxprey$S
rownames(sens_PP_maxprey$T) <- c("rprey", "K", "alpha", "eff", "pmort", "min_prey_hunt", "hunt_rate")
sens_PP_maxprey$T

```

